apiVersion: v1
data:
  anyuid_test: |
    test_anyuid() {
      scc_anyuid=`oc describe scc anyuid`
      for project in ${USER_PROJECTS}; do
        count_anyuid_default=`echo ${scc_anyuid} | grep "Users:.*system:serviceaccount:${project}:default" | wc -l`
        assertEquals " service account default in project ${project} has SCC anyuid;" 0 ${count_anyuid_default}
      done
    }
    suite_addTest test_anyuid
  exports: |
    export USER_PROJECTS=`oc get projects | grep -v "\(openshift\|kube\|default\|logging\)" | cut -d' ' -f1 | tail -n +2`
    export NODES=`oc get nodes | cut -d' ' -f1 | tail -n +2`
  limits_test: |
    test_project_quotas() {
      for project in ${USER_PROJECTS}; do
        # only proceed if no ClusterResourceQuota for the project set
        if [ -z `oc describe AppliedClusterResourceQuota -n ${project}` ]; then
          resourcequota=`oc get resourcequota -n ${project} | wc -l`
          assertNotEquals " resourcequota not set in project ${project};" 0 $resourcequota
        fi
      done
    }
    suite_addTest test_project_quotas
  nodes_test: |
    test_nodes_ready() {
      for node in ${NODES}; do
        ready=`oc get node ${node} -o json | jq -r '.status.conditions[] | select(.type=="Ready") | .status'`
        assertEquals " node ${node} not ready;" "True" $ready
      done
    }
    test_nodes_no_warnings() {
      for node in ${NODES}; do
        warnings=`oc describe node/${node} | grep -A64 "^Events:" | grep "Warn" | wc -l`
        assertEquals " node ${node} has warnings;" 0 ${warnings}
      done
    }
    suite_addTest test_nodes_ready
    suite_addTest test_nodes_no_warnings
  privileged_test: |
    test_security_context_privileged() {
      for project in ${USER_PROJECTS}; do
        for pod in `oc get po -n ${project} | cut -d' ' -f1 | tail -n +2`; do
          count_privileged=`oc export po/${pod} -n ${project} -o json | jq -r '..|.securityContext?.privileged' | grep -c true`
          assertEquals " pod ${pod} in project ${project} runs with privileged security context;" 0 ${count_privileged}
        done
      done
    }
    suite_addTest test_security_context_privileged
  self_provisioner_test: |
    test_self_provisioner() {
      count_self_provisioner=`oc adm policy who-can create projectrequests | grep system:authenticated | wc -l`
      assertEquals " authenticated users must not create project requests;" 0 ${count_self_provisioner}
    }
    suite_addTest test_self_provisioner
kind: ConfigMap
metadata:
  creationTimestamp: null
  name: openshift-unit
  namespace: openshift-unit
